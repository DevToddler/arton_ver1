<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/schema/mybatis-3-mapper.dtd">

<mapper namespace="com.arton.app.dao.BookingMapper">
    <!--BookingDto의 inner class-->
    <resultMap id="BookingMap" type="BookingDto">
        <result column="id" property="id"/>
        <result column="user_idx" property="userIdx"/>
        <result column="perf_id" property="perfId"/>
        <result column="seat_invt_id" property="seatInvtId"/>
        <result column="seat_id" property="seatId"/>
        <result column="perf_round_id" property="perfRoundId"/>
        <result column="booking_time" property="bookingTime"/>
        <result column="ticket_cnt" property="ticketCnt"/>
        <result column="price_o_total" property="priceOTotal"/>
        <result column="price_cut" property="priceCut"/>
        <result column="total_payment" property="totalPayment"/>
        <result column="pay_method" property="payMethod"/>
        <result column="booking_status" property="bookingStatus"/>
        <result column="cancel_time" property="cancelTime"/>

        <collection property="perfDto" resultMap="PerfDto"/>
        <collection property="perfRoundDto" resultMap="PerfRoundDto"/>
        <collection property="seatDto" resultMap="SeatDto"/>
    </resultMap>

    <resultMap id="PerfDto" type="PerfDto">
        <result column="perf_name" property="perfName"/>
        <result column="location" property="location"/>
        <result column="discount_rate" property="discountRate"/>
    </resultMap>

    <resultMap id="PerfRoundDto" type="PerfRoundDto">
        <result column="show_date" property="showDate"/>
        <result column="show_time" property="showTime"/>
    </resultMap>

    <resultMap id="SeatDto" type="SeatDto">
        <result column="seat_class" property="seatClass"/>
        <result column="seat_price" property="seatPrice"/>
    </resultMap>
    <!--CRUD 순서(생성, 읽기, 갱신, 삭제) => for Admin => for Test -->

    <!--예매 생성 : 계산되는 부분 뷰에서 끌어오기. 필요(userIdx, seatInvtId, ticketCnt, payMethod)-->
    <!--순서 : 1)좌석차감 2)예매생성-->
    <!--서비스(deal-예매)-->
    <!--SeatInvtMapper의 bookingSeat으로 좌석수 감소 먼저 적용 후-->
    <!--bookingSeat의 리턴값이 1이 정상적으로 나온 후에 insert 해주기-->
    <!--bookingSeat의 리턴값이 0이 나오면 좌석 재고가 모자라서 좌석수 감소가 적용되지 않은 것임.-->
    <insert id="insert" parameterType="map">
        INSERT INTO booking(user_idx, perf_id, seat_invt_id, seat_id, perf_round_id, booking_time, ticket_cnt, price_o_total, price_cut, total_payment, pay_method, booking_status, cancel_time)
        SELECT
            #{userIdx}
            , perf_id
            , #{seatInvtId}
            , seat_id
            , perf_round_id
            , NOW()
            , #{ticketCnt}
            , seat_price * #{ticketCnt}
            , seat_price * #{ticketCnt} * discount_rate / 100
            , seat_price * #{ticketCnt} - seat_price * #{ticketCnt} * discount_rate / 100
            , #{payMethod}
            , 1
            , null
        FROM view_seat_invt vsi WHERE vsi.seat_invt_id = #{seatInvtId}
    </insert>

    <!--예매 읽기(1개) : 필요(bookingId)-->
    <!--서비스(???)-->
    <select id="select" parameterType="int" resultType="BookingDto">
        SELECT *
        FROM booking
        WHERE id = #{bookingId}
    </select>

    <!--예매 읽기(예매 상태 = True) : 회원이 리뷰 작성 시 해당 공연 예매 여부 확인. 필요(userIdx
    , perfId)-->
    <!--서비스(deal-리뷰작성 시)-->
    <select id="chkBookingStatus" parameterType="map" resultType="BookingDto">
        SELECT *
        FROM booking
        WHERE user_idx = #{userIdx} AND perf_id = #{perfId} AND booking_status = 1
    </select>


    <!--예매 갱신(취소) : 필요(bookingId)-->
    <!--순서 : 1)예매갱신(취소) 2)좌석반환-->
    <!--서비스(mypage-예매취소)-->
    <update id="cancelBooking" parameterType="int">
        UPDATE booking
        SET
            booking_status = 0
            , cancel_time = NOW()
        WHERE id = #{bookingId}
    </update>

    <!--예매 읽기(예매 목록 5개) : 유저 마이페이지의 예매 목록. 필요(userIdx)-->
    <!--BookingMapper의 userBookingList와 함께 사용-->
    <!--서비스(mypage)-->
    <select id="userBookingList" parameterType="int" resultMap="BookingMap">
        SELECT
            b.*
            , vsi.perf_name
            , vsi.location
            , vsi.discount_rate

            , vsi.show_date
            , vsi.show_time

            , vsi.seat_class
            , vsi.seat_price
        FROM booking b
        JOIN view_seat_invt vsi ON vsi.seat_invt_id = b.seat_invt_id
        AND b.user_idx = #{userIdx}
        ORDER BY b.booking_time DESC
        LIMIT 0 , 5;
    </select>

    <!--&lt;!&ndash;마이페이지 예매(최신순)&ndash;&gt;-->
    <!--&lt;!&ndash;perf 에 구현해둠&ndash;&gt;-->
    <!--<select id="selectBooking" resultType="BookingDto">-->
    <!--    select b.booking_time, b.id, p.perf_name, ticket_cnt-->
    <!--    from booking b join perf p-->
    <!--    on b.perf_id = p.id join user u-->
    <!--    on b.user_idx = u.idx-->
    <!--    where u.user_id = #{u.user_id} and b.booking_status = 1-->
    <!--    order by booking_time desc-->
    <!--</select>-->

    <!--&lt;!&ndash;마이페이지 예매취소(최신순)&ndash;&gt;-->
    <!--<select id="selectCancel" resultType="BookingDto">-->
    <!--    select b.booking_time, b.id, p.perf_name, ticket_cnt-->
    <!--    from booking b join perf p-->
    <!--    on b.perf_id = p.id join user u-->
    <!--    on b.user_idx = u.idx-->
    <!--    where u.user_id = #{u.user_id} and b.booking_status = 0-->
    <!--    order by booking_time desc-->
    <!--</select>-->

    <!--&lt;!&ndash;예매 취소 (트랜잭션 처리 해주기)&ndash;&gt;-->
    <!--<update id="updateCancel" parameterType="BookingDto">-->
    <!--    update booking set booking_status = 0 where user_idx = #{user_idx}-->
    <!--</update>-->

</mapper>